package com.useful.dynamic;
/**
*	@author 作者 Joker青
*	@version 创建时间：2019年10月29日 下午11:04:36	
*/

/*
 * 		动态规划 - 背包问题
 * 
 * */

/*
 * 	动态规划算法：
 * 		1.每次遍历到的第i个物品，根据w[i]和v[i]来确定是否需要将该物品放入背包中。
 * 			即对于给定的n个物品，设v[i]、w[i]分别为第i个物品的价值和重量，C为背包的容量。
 * 				再令v[i][j]表示在前i个物品中能够装入容量为j的背包中的最大价值
 * 		我们有下面的公司：
 * 			(1) v[i][0] = v[0][j]=0		// 表示 填入表 第一行和第一列为0
 * 			(2) 当w[i] > j 时： v[i][j] = v[i-1][j]	// 当准备加入新增的商品的容量大于当前背包的容量时，就直接使用上一个单元格的装入策略
 * 			(3)	当j>=w[i]时：v[i][j]=max{v[i-1][j],v[i-1][j-w[i]]+v[i]}
 * 				当准备加入的新增的商品的容量小于等于当前背包的容量
 * 				装入的方式：
 * 					v[i-1][j]:就是上一个单元格的装入的最大值
 * 					v[i]:表示当前商品的价值
 * 					v[i-1][j-w[i]]：装入i-1商品，到剩余空间j-w[i]的最大值
 * 					当j>=w[i]时：v[i][j]=max{v[i-1][j],v[i-1][j-w[i]]}
 * 
 * 
 * */

public class KnapsackProblem {

	public static void main(String[] args) {
		
	}

}
	